{"ast":null,"code":"var _jsxFileName = \"/Users/ramya/Desktop/mern-social/client/src/pages/Covid/components/CellRenderer.js\";\nimport React from 'react'; // Libraries\n\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport moment from 'moment';\nimport rehypeRaw from 'rehype-raw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InfoCellRenderer = ({\n  valueFormatted,\n  value\n}) => {\n  const cellValue = valueFormatted || value;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      remarkPlugins: [gfm],\n      rehypePlugins: [rehypeRaw] // eslint-disable-next-line react/no-children-prop\n      ,\n      children: \"s\",\n      skipHtml: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = InfoCellRenderer;\nexport const customValueSetter = () => 5;\nexport const CreatedAtCellRenderer = props => {\n  const cellValue = props.valueFormatted ? props.valueFormatted : props.value;\n  return moment(cellValue).fromNow();\n};\n_c2 = CreatedAtCellRenderer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InfoCellRenderer\");\n$RefreshReg$(_c2, \"CreatedAtCellRenderer\");","map":{"version":3,"sources":["/Users/ramya/Desktop/mern-social/client/src/pages/Covid/components/CellRenderer.js"],"names":["React","ReactMarkdown","gfm","moment","rehypeRaw","InfoCellRenderer","valueFormatted","value","cellValue","height","customValueSetter","CreatedAtCellRenderer","props","fromNow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAD,KAA+B;AAC7D,QAAMC,SAAS,GAAGF,cAAc,IAAIC,KAApC;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,aAAa,EAAE,CAACP,GAAD,CADjB;AAEE,MAAA,aAAa,EAAE,CAACE,SAAD,CAFjB,CAGE;AAHF;AAIE,MAAA,QAAQ,EAAC,GAJX;AAKE,MAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAdM;KAAMC,gB;AAgBb,OAAO,MAAMK,iBAAiB,GAAG,MAAM,CAAhC;AAEP,OAAO,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AAC9C,QAAMJ,SAAS,GAAGI,KAAK,CAACN,cAAN,GAAuBM,KAAK,CAACN,cAA7B,GAA8CM,KAAK,CAACL,KAAtE;AACA,SAAOJ,MAAM,CAACK,SAAD,CAAN,CAAkBK,OAAlB,EAAP;AACD,CAHM;MAAMF,qB","sourcesContent":["import React from 'react';\n\n// Libraries\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport moment from 'moment';\nimport rehypeRaw from 'rehype-raw';\n\nexport const InfoCellRenderer = ({ valueFormatted, value }) => {\n  const cellValue = valueFormatted || value;\n\n  return (\n    <div style={{ height: '100' }}>\n      <ReactMarkdown\n        remarkPlugins={[gfm]}\n        rehypePlugins={[rehypeRaw]}\n        // eslint-disable-next-line react/no-children-prop\n        children=\"s\"\n        skipHtml\n      />\n    </div>\n  );\n};\n\nexport const customValueSetter = () => 5;\n\nexport const CreatedAtCellRenderer = (props) => {\n  const cellValue = props.valueFormatted ? props.valueFormatted : props.value;\n  return moment(cellValue).fromNow();\n};\n"]},"metadata":{},"sourceType":"module"}