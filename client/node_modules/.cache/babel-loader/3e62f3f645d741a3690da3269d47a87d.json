{"ast":null,"code":"import { put, call, all } from 'redux-saga/effects';\nimport { topNews, anyNews, sourceNews } from '../Api/api';\nimport * as types from '../constants/actionTypes'; // Responsible for searching media library, making calls to the API\n// and instructing the redux-saga middle ware on the next line of action,\n// for success or failure operation.\n\nexport function* anyNewsSaga({\n  payload\n}) {\n  try {\n    const {\n      news\n    } = yield all({\n      news: call(anyNews, payload)\n    });\n    yield [put({\n      type: types.SEARCH_ANY_NEWS_SUCCESS,\n      news\n    })];\n  } catch (error) {\n    yield put({\n      type: types.SEARCH_ANY_NEWS_ERROR,\n      error\n    });\n  }\n}\nexport function* topNewsSaga({\n  payload\n}) {\n  try {\n    const {\n      news\n    } = yield all({\n      news: call(topNews, payload)\n    });\n    yield [put({\n      type: types.SEARCH_TOP_NEWS_SUCCESS,\n      news\n    })];\n  } catch (error) {\n    yield put({\n      type: types.SEARCH_TOP_NEWS_ERROR,\n      error\n    });\n  }\n}\nexport function* sourceNewsSaga({\n  payload\n}) {\n  try {\n    const {\n      news\n    } = yield all({\n      news: call(sourceNews, payload)\n    });\n    yield [put({\n      type: types.SEARCH_SOURCES_NEWS_SUCCESS,\n      news\n    })];\n  } catch (error) {\n    yield put({\n      type: types.SEARCH_SOURCES_NEWS_ERROR,\n      error\n    });\n  }\n}","map":{"version":3,"sources":["/Users/ramya/Desktop/mern-social/client/src/pages/NewsPage/sagas/newsSaga.js"],"names":["put","call","all","topNews","anyNews","sourceNews","types","anyNewsSaga","payload","news","type","SEARCH_ANY_NEWS_SUCCESS","error","SEARCH_ANY_NEWS_ERROR","topNewsSaga","SEARCH_TOP_NEWS_SUCCESS","SEARCH_TOP_NEWS_ERROR","sourceNewsSaga","SEARCH_SOURCES_NEWS_SUCCESS","SEARCH_SOURCES_NEWS_ERROR"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,QAA+B,oBAA/B;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAO,KAAKC,KAAZ,MAAuB,0BAAvB,C,CAEA;AACA;AACA;;AACA,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACxC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC;AACzBO,MAAAA,IAAI,EAAER,IAAI,CAACG,OAAD,EAAUI,OAAV;AADe,KAAD,CAA1B;AAGA,UAAM,CACJR,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACK,uBAAd;AAAuCF,MAAAA;AAAvC,KAAD,CADC,CAAN;AAGD,GAPD,CAOE,OAAOG,KAAP,EAAc;AACd,UAAMZ,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACO,qBAAd;AAAqCD,MAAAA;AAArC,KAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,WAAV,CAAsB;AAAEN,EAAAA;AAAF,CAAtB,EAAmC;AAExC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC;AACzBO,MAAAA,IAAI,EAAER,IAAI,CAACE,OAAD,EAAUK,OAAV;AADe,KAAD,CAA1B;AAGA,UAAM,CAACR,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACS,uBAAd;AAAuCN,MAAAA;AAAvC,KAAD,CAAJ,CAAN;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAMZ,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACU,qBAAd;AAAqCJ,MAAAA;AAArC,KAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUK,cAAV,CAAyB;AAAET,EAAAA;AAAF,CAAzB,EAAsC;AAC3C,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC;AACzBO,MAAAA,IAAI,EAAER,IAAI,CAACI,UAAD,EAAaG,OAAb;AADe,KAAD,CAA1B;AAGF,UAAM,CACJR,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACY,2BAAd;AAA2CT,MAAAA;AAA3C,KAAD,CADC,CAAN;AAID,GARD,CAQE,OAAOG,KAAP,EAAc;AACd,UAAMZ,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEJ,KAAK,CAACa,yBAAd;AAAyCP,MAAAA;AAAzC,KAAD,CAAT;AACD;AACF","sourcesContent":["import { put, call, all } from 'redux-saga/effects';\nimport { topNews, anyNews, sourceNews } from '../Api/api';\nimport * as types from '../constants/actionTypes';\n\n// Responsible for searching media library, making calls to the API\n// and instructing the redux-saga middle ware on the next line of action,\n// for success or failure operation.\nexport function* anyNewsSaga({ payload }) {\n  try {\n    const { news } = yield all({\n      news: call(anyNews, payload),\n    })\n    yield [\n      put({ type: types.SEARCH_ANY_NEWS_SUCCESS, news }),\n    ]\n  } catch (error) {\n    yield put({ type: types.SEARCH_ANY_NEWS_ERROR, error });\n  }\n}\n\nexport function* topNewsSaga({ payload }) {\n\n  try {\n    const { news } = yield all({\n      news: call(topNews, payload),\n    })\n    yield [put({ type: types.SEARCH_TOP_NEWS_SUCCESS, news })]\n  } catch (error) {\n    yield put({ type: types.SEARCH_TOP_NEWS_ERROR, error });\n  }\n}\n\nexport function* sourceNewsSaga({ payload }) {\n  try {\n      const { news } = yield all({\n        news: call(sourceNews, payload),\n      })\n    yield [\n      put({ type: types.SEARCH_SOURCES_NEWS_SUCCESS, news }),\n\n    ]\n  } catch (error) {\n    yield put({ type: types.SEARCH_SOURCES_NEWS_ERROR, error });\n  }\n}"]},"metadata":{},"sourceType":"module"}