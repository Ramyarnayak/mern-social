{"ast":null,"code":"var _jsxFileName = \"/Users/ramya/Desktop/mern-social/client/src/pages/Covid/components/Table.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react'; // Libraries\n\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react'; // CSS\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css'; // Components\n\nimport { CreatedAtCellRenderer } from './CellRenderer';\nimport { InfoCellRenderer } from './CellRenderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  darkMode,\n  rowData,\n  setShareArray\n}) => {\n  _s();\n\n  const [darkThemeClassState, setDarkThemeClassState] = useState(''); // Helper Functions\n\n  const customValueGetter = params => params.node.data.info;\n\n  const customValueGetterContact = params => params.node.data.contact;\n\n  const onSelectionChanged = event => setShareArray(event.api.getSelectedNodes());\n\n  useEffect(() => {\n    const themeClassName = 'light' ? 'ag-theme-alpine-dark' : 'ag-theme-alpine';\n    setDarkThemeClassState(themeClassName);\n  }, ['light']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '70vh',\n      marginTop: 20\n    },\n    className: darkThemeClassState,\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      suppressRowClickSelection: true,\n      rowSelection: \"multiple\",\n      rowHeight: 200,\n      onSelectionChanged: onSelectionChanged,\n      frameworkComponents: {\n        infoCellRenderer: InfoCellRenderer,\n        createdAtCellRenderer: CreatedAtCellRenderer\n      },\n      overlayLoadingTemplate: '<span className=\"ag-overlay-loading-center\">Please wait while we are fetching the data</span>',\n      overlayNoRowsTemplate: rowData ? '<span >Please select your state and required resource type</span>' : '<span className=\"ag-overlay-loading-center\">Please wait while we are fetching the data</span>',\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"district\",\n        checkboxSelection: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"info\",\n        wrapText: true,\n        minWidth: 200,\n        flex: 5,\n        valueGetter: customValueGetter,\n        cellRenderer: \"infoCellRenderer\",\n        cellEditor: \"agLargeTextCellEditor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"contact\",\n        filter: \"agTextColumnFilter\",\n        wrapText: true,\n        flex: 4,\n        minWidth: 160,\n        cellEditor: \"agLargeTextCellEditor\",\n        valueGetter: customValueGetterContact,\n        cellRenderer: \"infoCellRenderer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"createdAt\",\n        cellRenderer: \"createdAtCellRenderer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"7i0rRKoflwfTUrGE14VQU+DLG9M=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/ramya/Desktop/mern-social/client/src/pages/Covid/components/Table.js"],"names":["React","useState","useEffect","AgGridColumn","AgGridReact","CreatedAtCellRenderer","InfoCellRenderer","Table","darkMode","rowData","setShareArray","darkThemeClassState","setDarkThemeClassState","customValueGetter","params","node","data","info","customValueGetterContact","contact","onSelectionChanged","event","api","getSelectedNodes","themeClassName","height","marginTop","infoCellRenderer","createdAtCellRenderer"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,eAA1C,C,CAEA;;AACA,OAAO,2CAAP;AACA,OAAO,mDAAP;AACA,OAAO,wDAAP,C,CAEA;;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,gBAAT,QAAiC,gBAAjC;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KAA0C;AAAA;;AACtD,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDX,QAAQ,CAAC,EAAD,CAA9D,CADsD,CAGtD;;AACA,QAAMY,iBAAiB,GAAIC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,IAAvD;;AACA,QAAMC,wBAAwB,GAAIJ,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBG,OAA9D;;AACA,QAAMC,kBAAkB,GAAIC,KAAD,IACzBX,aAAa,CAACW,KAAK,CAACC,GAAN,CAAUC,gBAAV,EAAD,CADf;;AAGArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,cAAc,GAAG,UACnB,sBADmB,GAEnB,iBAFJ;AAGAZ,IAAAA,sBAAsB,CAACY,cAAD,CAAtB;AACD,GALQ,EAKN,CAAC,OAAD,CALM,CAAT;AAOA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KADT;AAEE,IAAA,SAAS,EAAEf,mBAFb;AAAA,2BAIE,QAAC,WAAD;AACE,MAAA,OAAO,EAAEF,OADX;AAEE,MAAA,yBAAyB,MAF3B;AAGE,MAAA,YAAY,EAAC,UAHf;AAIE,MAAA,SAAS,EAAE,GAJb;AAKE,MAAA,kBAAkB,EAAEW,kBALtB;AAME,MAAA,mBAAmB,EAAE;AACnBO,QAAAA,gBAAgB,EAAErB,gBADC;AAEnBsB,QAAAA,qBAAqB,EAAEvB;AAFJ,OANvB;AAUE,MAAA,sBAAsB,EACpB,+FAXJ;AAaE,MAAA,qBAAqB,EACnBI,OAAO,GACH,mEADG,GAEH,+FAhBR;AAAA,8BAmBE,QAAC,YAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,iBAAiB;AAFnB;AAAA;AAAA;AAAA;AAAA,cAnBF,eAuBE,QAAC,YAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,QAAQ,EAAE,GAHZ;AAIE,QAAA,IAAI,EAAE,CAJR;AAME,QAAA,WAAW,EAAEI,iBANf;AAOE,QAAA,YAAY,EAAC,kBAPf;AAQE,QAAA,UAAU,EAAC;AARb;AAAA;AAAA;AAAA;AAAA,cAvBF,eAiCE,QAAC,YAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,MAAM,EAAC,oBAFT;AAGE,QAAA,QAAQ,MAHV;AAIE,QAAA,IAAI,EAAE,CAJR;AAKE,QAAA,QAAQ,EAAE,GALZ;AAME,QAAA,UAAU,EAAC,uBANb;AAOE,QAAA,WAAW,EAAEK,wBAPf;AAQE,QAAA,YAAY,EAAC;AARf;AAAA;AAAA;AAAA;AAAA,cAjCF,eA2CE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC,WAApB;AAAgC,QAAA,YAAY,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,cA3CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD,CApED;;GAAMX,K;;KAAAA,K;AAsEN,eAAeA,KAAf","sourcesContent":["/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\n\n// Libraries\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\n// CSS\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\n\n// Components\nimport { CreatedAtCellRenderer } from './CellRenderer';\nimport { InfoCellRenderer } from './CellRenderer';\n\nconst Table = ({ darkMode, rowData, setShareArray }) => {\n  const [darkThemeClassState, setDarkThemeClassState] = useState('');\n\n  // Helper Functions\n  const customValueGetter = (params) => params.node.data.info;\n  const customValueGetterContact = (params) => params.node.data.contact;\n  const onSelectionChanged = (event) =>\n    setShareArray(event.api.getSelectedNodes());\n\n  useEffect(() => {\n    const themeClassName = 'light'\n      ? 'ag-theme-alpine-dark'\n      : 'ag-theme-alpine';\n    setDarkThemeClassState(themeClassName);\n  }, ['light']);\n\n  return (\n    <div\n      style={{ height: '70vh', marginTop: 20 }}\n      className={darkThemeClassState}\n    >\n      <AgGridReact\n        rowData={rowData}\n        suppressRowClickSelection\n        rowSelection='multiple'\n        rowHeight={200}\n        onSelectionChanged={onSelectionChanged}\n        frameworkComponents={{\n          infoCellRenderer: InfoCellRenderer,\n          createdAtCellRenderer: CreatedAtCellRenderer,\n        }}\n        overlayLoadingTemplate={\n          '<span className=\"ag-overlay-loading-center\">Please wait while we are fetching the data</span>'\n        }\n        overlayNoRowsTemplate={\n          rowData\n            ? '<span >Please select your state and required resource type</span>'\n            : '<span className=\"ag-overlay-loading-center\">Please wait while we are fetching the data</span>'\n        }\n      >\n        <AgGridColumn\n          field='district'\n          checkboxSelection\n        />\n        <AgGridColumn\n          field='info'\n          wrapText\n          minWidth={200}\n          flex={5}\n         \n          valueGetter={customValueGetter}\n          cellRenderer='infoCellRenderer'\n          cellEditor='agLargeTextCellEditor'\n        />\n        <AgGridColumn\n          field='contact'\n          filter='agTextColumnFilter' \n          wrapText\n          flex={4}\n          minWidth={160}\n          cellEditor='agLargeTextCellEditor'\n          valueGetter={customValueGetterContact}\n          cellRenderer='infoCellRenderer'\n        />\n        <AgGridColumn field='createdAt' cellRenderer='createdAtCellRenderer' />\n      </AgGridReact>\n    </div>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}